#!/bin/bash

#     ____                  __        ____
#    / __ \____ ___________/ /_____ _/ / /
#   / /_/ / __ `/ ___/ ___/ __/ __ `/ / /
#  / ____/ /_/ / /__(__  ) /_/ /_/ / / /
# /_/    \__,_/\___/____/\__/\__,_/_/_/
#
# Copyright (C) 2020-2021
#
# This file is part of Pacstall
#
# Pacstall is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# Pacstall is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pacstall. If not, see <https://www.gnu.org/licenses/>.

# Configuration
export LC_ALL=C
export HOMEDIR="/home/$(logname)"
export LOGDIR="/var/log/pacstall"
export SRCDIR="/tmp/pacstall"
export STGDIR="/usr/share/pacstall"
export STOWDIR="/usr/src/pacstall"

# Colors
export BOLD=$(tput bold)
export NORMAL=$(tput sgr0)
export NC='\033[0m'
# Curtesy of https://stackoverflow.com/a/28938235/13449010

# Regular Colors
export BLACK='\033[0;30m'        # Black
export RED='\033[0;31m'          # Red
export GREEN='\033[0;32m'        # Green
export YELLOW='\033[0;33m'       # Yellow
export BLUE='\033[0;34m'         # Blue
export PURPLE='\033[0;35m'       # Purple
export CYAN='\033[0;36m'         # Cyan
export WHITE='\033[0;37m'        # White

# Bold
export BBlack='\033[1;30m'       # Black
export BRed='\033[1;31m'         # Red
export BGreen='\033[1;32m'       # Green
export BYellow='\033[1;33m'      # Yellow
export BBlue='\033[1;34m'        # Blue
export BPurple='\033[1;35m'      # Purple
export BCyan='\033[1;36m'        # Cyan
export BWhite='\033[1;37m'       # White

# Underline
export UBlack='\033[4;30m'       # Black
export URed='\033[4;31m'         # Red
export UGreen='\033[4;32m'       # Green
export UYellow='\033[4;33m'      # Yellow
export UBlue='\033[4;34m'        # Blue
export UPurple='\033[4;35m'      # Purple
export UCyan='\033[4;36m'        # Cyan
export UWhite='\033[4;37m'       # White

# Background
export On_Black='\033[40m'       # Black
export On_Red='\033[41m'         # Red
export On_Green='\033[42m'       # Green
export On_Yellow='\033[43m'      # Yellow
export On_Blue='\033[44m'        # Blue
export On_Purple='\033[45m'      # Purple
export On_Cyan='\033[46m'        # Cyan
export On_White='\033[47m'       # White

# High Intensity
export IBlack='\033[0;90m'       # Black
export IRed='\033[0;91m'         # Red
export IGreen='\033[0;92m'       # Green
export IYellow='\033[0;93m'      # Yellow
export IBlue='\033[0;94m'        # Blue
export IPurple='\033[0;95m'      # Purple
export ICyan='\033[0;96m'        # Cyan
export IWhite='\033[0;97m'       # White

# Bold High Intensity
export BIBlack='\033[1;90m'      # Black
export BIRed='\033[1;91m'        # Red
export BIGreen='\033[1;92m'      # Green
export BIYellow='\033[1;93m'     # Yellow
export BIBlue='\033[1;94m'       # Blue
export BIPurple='\033[1;95m'     # Purple
export BICyan='\033[1;96m'       # Cyan
export BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
export On_IBlack='\033[0;100m'   # Black
export On_IRed='\033[0;101m'     # Red
export On_IGreen='\033[0;102m'   # Green
export On_IYellow='\033[0;103m'  # Yellow
export On_IBlue='\033[0;104m'    # Blue
export On_IPurple='\033[0;105m'  # Purple
export On_ICyan='\033[0;106m'    # Cyan
export On_IWhite='\033[0;107m'   # White

function ask() {
  local prompt default reply

  if [[ ${2:-} = 'Y' ]]; then
    prompt="${BIGreen}Y${NC}/${RED}n${NC}"
    default='Y'
  elif [[ ${2:-} = 'N' ]]; then
    prompt="${GREEN}y${NC}/${BIRed}N${NC}"
    default='N'
  else
    prompt="${GREEN}y${NC}/${RED}n${NC}"
  fi

  while true; do
    # Ask the question (not using "read -p" as it uses stderr not stdout)
    echo -ne "$1 [$prompt] "

    # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
    if [[ -z "$DISABLE_PROMPTS" ]]; then
      read -r reply < /dev/tty
    else
      echo "$default"
      reply=$default
    fi

    # Default?
    if [[ -z $reply ]]; then
      reply=$default
    fi

    # Check if the reply is valid
    case "$reply" in
      Y*|y*) return 0 ;;
      N*|n*) return 1 ;;
    esac
  done
}

function fancy_message() {
  local MESSAGE_TYPE="${1}"
  local MESSAGE="${2}"

  case ${MESSAGE_TYPE} in
    info) echo -e "[${BGreen}+${NC}] INFO: ${MESSAGE}";;
    warn) echo -e "[${BRed}*${NC}] WARNING: ${MESSAGE}";;
    error) echo -e "[${BRed}!${NC}] ERROR: ${MESSAGE}";;
    *) echo -e "[${BOLD}?${NORMAL}] UNKNOWN: ${MESSAGE}";;
  esac
}

# run sudo apt update if it's been more than a week
[ -z "$(find -H /var/lib/apt/lists -maxdepth 0 -mtime -7)" ] && sudo apt-get update -qq

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
  case "$1" in
    -P|--disable-prompts)
      fancy_message warn "Prompts are disabled"
      DISABLE_PROMPTS=yes
    ;;

    -h|--help)
      echo " 
      options:
      -I --install, Installs package
      -Il --install-local, Installs a local package
      -S --search, Search for package
      -R --remove, Removes package
      -D --download, Downloads script
      -C --change-repo, Chooses repo
      -U --update, Update script
      -V --version, Prints pacstall version
      -L --list, Lists installed packages
      -Up --upgrade, Upgrades packages
      -Qi --query-info, Get package info
       "
      exit 0
    ;;

    -I|--install)
      function trap_ctrlc () {
	      fancy_message warn "the installation of $2 was interrupted, removing files"
	      rm -rf "${SRCDIR:?}"/* # :? makes bash error out in case SRCDIR is empty, saving us from yoinking /* directory by mistake
        exit 2
      }
      trap "trap_ctrlc" 2

      PACKAGE=$2
      if [[ -z "$PACKAGE" ]]; then
        fancy_message error "You failed to specify a package"
        exit 1
      fi

      # Make the directory if not exist
      if [[ ! -e "$STGDIR/repo/" ]]; then
        sudo mkdir -p "$STGDIR/repo"
        sudo touch "$STGDIR/repo/pacstallrepo.txt"
        sudo pacstall -C
      fi

      REPO=$(cat "$STGDIR/repo/pacstallrepo.txt")
      URL="$REPO/packages/$PACKAGE/$PACKAGE.pacscript"

      source "$STGDIR/scripts/download.sh"
      source "$STGDIR/scripts/install-local.sh"
      exit 0
    ;;

    -Il|--install-local)
      REPO=$(cat "$STGDIR/repo/pacstallrepo.txt") 
      INPUT="$(echo "$2" | sed 's/\..*$//')" # Removes the .pacscript suffix

      # Check if the file exist (both .pacscript and without)
      if [[ ! -f "$2" && ! -f "$INPUT" ]]; then
        fancy_message error "$2 does not exist"
        exit 1
      fi

      cd "$(dirname "$INPUT")" || (fancy_message error "The directory does not exist"; exit 1)
      PACKAGE="$(basename "$INPUT")"

      source "$STGDIR/scripts/install-local.sh"
      exit 0
    ;;

    -S|--search)
      source "$STGDIR/scripts/search.sh"
    ;;

    -R|--remove)
      PACKAGE=$2
      source "$STGDIR/scripts/remove.sh"
    ;;

    -C|--change-repo)
      REPO="$2"

      if [[ -z "$REPO" ]]; then
        source "$STGDIR/scripts/change-repo.sh"
      else
        echo "$REPO" | sudo tee "$STGDIR/repo/pacstallrepo.txt" > /dev/null 2>&1
        exit 0
      fi
    ;;

    -V|--version)
      PACKAGE="$2"

      if [[ -z "$PACKAGE" ]]; then
        echo -e "1.4 ${BICyan}Turkuaz${NC}"
        exit 0

      else
        if pacstall -Qi "$PACKAGE" | grep 'version' | cut -d ":" -f2 | sed 's/ //g'; then
          exit 0
        else
          fancy_message error "$PACKAGE doesn't exist"
          exit 1
        fi
      fi
    ;;

    -U|--update)
      USERNAME="$2"
      BRANCH="$3"
      source "$STGDIR/scripts/update.sh"
    ;;

    -L|--list)
      /bin/ls -1aA "$STOWDIR"
      exit 0
    ;;

    -D|--download)
      PACKAGE=$2

      if [[ -z "$PACKAGE" ]]; then
        fancy_message error "You failed to specify a package"
        exit 1
      fi

      REPO=$(cat "$STGDIR/repo/pacstallrepo.txt")
      source "$STGDIR/scripts/download.sh"
      fancy_message info "$PACKAGE's pacscript is downloaded in ${GREEN}$HOMEDIR/.cache/pacstall/$PACKAGE${NC}"
      exit 0
    ;;

    -Up|--upgrade)
      source "$STGDIR/scripts/upgrade.sh"
      exit 0
    ;;

    -Qi|--query-info)
      PACKAGE=$2
      source "$STGDIR/scripts/query-info.sh"
    ;;

    -T|--tree)
      PACKAGE="$2"

      if [[ ! -d "$STOWDIR/$PACKAGE" ]]; then
        fancy_message error "$PACKAGE does not exist"
        exit 1
      fi

      tree -C "$STOWDIR/$PACKAGE" | sed "s/\/usr\/src\/pacstall\/$PACKAGE/\//g"
    ;;

    *)
      pacstall -h
      exit 3
    ;;
  esac; shift
done
if [[ "$1" == '--' ]]; then shift; fi
