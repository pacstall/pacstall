#!/bin/bash

#     ____                  __        ____
#    / __ \____ ___________/ /_____ _/ / /
#   / /_/ / __ `/ ___/ ___/ __/ __ `/ / /
#  / ____/ /_/ / /__(__  ) /_/ /_/ / / /
# /_/    \__,_/\___/____/\__/\__,_/_/_/
#
# Copyright (C) 2020-2021
#
# This file is part of Pacstall
#
# Pacstall is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# Pacstall is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pacstall. If not, see <https://www.gnu.org/licenses/>.

# Configuration
export LC_ALL=C
export LOGDIR="/var/log/pacstall/metadata"
export LOGFILE="/var/log/pacstall/error_log/$(date +"%F_%T.log")"
export SRCDIR="/tmp/pacstall"
export STGDIR="/usr/share/pacstall"
export STOWDIR="/usr/src/pacstall"

# Colors
export BOLD=$(tput bold)
export NORMAL=$(tput sgr0)
export NC='\033[0m'
# Curtesy of https://stackoverflow.com/a/28938235/13449010

# Regular Colors
export BLACK='\033[0;30m'        # Black
export RED='\033[0;31m'          # Red
export GREEN='\033[0;32m'        # Green
export YELLOW='\033[0;33m'       # Yellow
export BLUE='\033[0;34m'         # Blue
export PURPLE='\033[0;35m'       # Purple
export CYAN='\033[0;36m'         # Cyan
export WHITE='\033[0;37m'        # White

# Bold
export BBlack='\033[1;30m'       # Black
export BRed='\033[1;31m'         # Red
export BGreen='\033[1;32m'       # Green
export BYellow='\033[1;33m'      # Yellow
export BBlue='\033[1;34m'        # Blue
export BPurple='\033[1;35m'      # Purple
export BCyan='\033[1;36m'        # Cyan
export BWhite='\033[1;37m'       # White

# Underline
export UBlack='\033[4;30m'       # Black
export URed='\033[4;31m'         # Red
export UGreen='\033[4;32m'       # Green
export UYellow='\033[4;33m'      # Yellow
export UBlue='\033[4;34m'        # Blue
export UPurple='\033[4;35m'      # Purple
export UCyan='\033[4;36m'        # Cyan
export UWhite='\033[4;37m'       # White

# Background
export On_Black='\033[40m'       # Black
export On_Red='\033[41m'         # Red
export On_Green='\033[42m'       # Green
export On_Yellow='\033[43m'      # Yellow
export On_Blue='\033[44m'        # Blue
export On_Purple='\033[45m'      # Purple
export On_Cyan='\033[46m'        # Cyan
export On_White='\033[47m'       # White

# High Intensity
export IBlack='\033[0;90m'       # Black
export IRed='\033[0;91m'         # Red
export IGreen='\033[0;92m'       # Green
export IYellow='\033[0;93m'      # Yellow
export IBlue='\033[0;94m'        # Blue
export IPurple='\033[0;95m'      # Purple
export ICyan='\033[0;96m'        # Cyan
export IWhite='\033[0;97m'       # White

# Bold High Intensity
export BIBlack='\033[1;90m'      # Black
export BIRed='\033[1;91m'        # Red
export BIGreen='\033[1;92m'      # Green
export BIYellow='\033[1;93m'     # Yellow
export BIBlue='\033[1;94m'       # Blue
export BIPurple='\033[1;95m'     # Purple
export BICyan='\033[1;96m'       # Cyan
export BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
export On_IBlack='\033[0;100m'   # Black
export On_IRed='\033[0;101m'     # Red
export On_IGreen='\033[0;102m'   # Green
export On_IYellow='\033[0;103m'  # Yellow
export On_IBlue='\033[0;104m'    # Blue
export On_IPurple='\033[0;105m'  # Purple
export On_ICyan='\033[0;106m'    # Cyan
export On_IWhite='\033[0;107m'   # White

# This is the ask function. You can source this code block and then run something like:
# ask "Do you like the color blue? " Y
# if [[ $answer -eq 1 ]]; then
#   echo "You like blue"
# else
#   echo "You don't like blue"
# fi
#
# Y=1 and N=0
# You can specify {Y,N} or leave it out to prevent entering the default but this is not allowed in pacstall because of the -P flag which gives unattended installs
function ask() {
	local prompt default reply

	if [[ ${2:-} = 'Y' ]]; then
		prompt="${BIGreen}Y${NC}/${RED}n${NC}"
		default='Y'
	elif [[ ${2:-} = 'N' ]]; then
		prompt="${GREEN}y${NC}/${BIRed}N${NC}"
		default='N'
	else
		prompt="${GREEN}y${NC}/${RED}n${NC}"
	fi
	
	# Ask the question (not using "read -p" as it uses stderr not stdout)
	echo -ne "$1 [$prompt] "

	# Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
	if [[ -z "$DISABLE_PROMPTS" ]]; then
		read -r reply < /dev/tty
	else
		echo "$default"
		reply=$default
	fi

	# Default?
	if [[ -z $reply ]]; then
		reply=$default
	fi

	while true; do
		# Check if the reply is valid
		case "$reply" in
			Y*|y*)
				export answer=1
				return 0	#return code for backwards compatibility
				break
			;;
			N*|n*)
				export answer=0
				return 1	#return code
				break
			;;
			*)
				echo -ne "$1 [$prompt] "
				read -r reply < /dev/tty
			;;	
		esac
	done
}

# fancy_message allows visually appealing output.
# Source the code block and run:
#
# `fancy_message {info,warn,error} "What you want to say"`
function fancy_message() {
	local MESSAGE_TYPE="${1}"
	local MESSAGE="${2}"

	case ${MESSAGE_TYPE} in
		info) echo -e "[${BGreen}+${NC}] INFO: ${MESSAGE}";;
		warn) echo -e "[${BYellow}*${NC}] WARNING: ${MESSAGE}";;
		error) echo -e "[${BRed}!${NC}] ERROR: ${MESSAGE}";;
		*) echo -e "[${BOLD}?${NORMAL}] UNKNOWN: ${MESSAGE}";;
	esac
}

# use axel if avaliable
function download() {
	fancy_message info "$2"
	if command -v axel > /dev/null; then
		sudo axel -n $(($(nproc) + 5)) -ao "${1##*/}" "$1"
	else
		sudo wget -q --show-progress --progress=bar:force "$1" 2>&1
	fi
}

# run sudo apt update if it's been more than a week
[ -z "$(find -H /var/lib/apt/lists -maxdepth 0 -mtime -7)" ] && sudo apt-get update -qq

source "$STGDIR/scripts/error_log.sh"

while [[ ! "$1" == "--" ]]; do
	case "$1" in
		-P|--disable-prompts)
			fancy_message warn "Prompts are disabled"
			DISABLE_PROMPTS=yes
		;;

		-h|--help)
			echo " 
			options:
			-I --install, Installs package
			-Il --install-local, Installs a local package
			-S --search, Search for package
			-R --remove, Removes package
			-D --download, Downloads script
			-A --add-repo, Adds repo to your repo list
			-U --update, Update script
			-V --version, Prints pacstall version
			-L --list, Lists installed packages
			-Up --upgrade, Upgrades packages
			-Qi --query-info, Get package info
			"
			exit 0
		;;

		-I|--install)
			function trap_ctrlc () {
				fancy_message warn "The installation of $2 was interrupted, removing files"
				rm -rf "${SRCDIR:?}"/* # :? makes bash error out in case SRCDIR is empty, saving us from yoinking /* directory by mistake
				exit 2
			}
			# Begin trapping
			trap "trap_ctrlc" 2

			while [[ -n "$2" ]]; do
				export PACKAGE=$2
				shift
				if [[ -z "$PACKAGE" ]]; then
					fancy_message error "You failed to specify a package"
					exit 1
				fi

				# Make the directory if not exist
				if [[ ! -e "$STGDIR/repo/" ]]; then
					sudo mkdir -p "$STGDIR/repo"
					sudo touch "$STGDIR/repo/pacstallrepo.txt"
					sudo pacstall -A
				fi

				export type="install"
				export local="no"
				source "$STGDIR/scripts/search.sh"
				
				if [[ $? -ne 0 ]]; then
					continue
				fi

				URL="$REPO/packages/$PACKAGE/$PACKAGE.pacscript"
				source "$STGDIR/scripts/download.sh"
				
				if [[ $? -ne 0 ]]; then
					fancy_message error "Failed to download the ${GREEN}${PACKAGE}${NC} pacscript"
					continue
				fi
				
				export REPO
				source "$STGDIR/scripts/install-local.sh"
				if [[ $? -ne 0 ]]; then
					fancy_message error "Failed to install ${GREEN}${PACKAGE}${NC}"
					continue
				fi
			done
			
			if [[ -s "LOGFILE" ]]; then
				exit 1
			fi
				exit 0
			;;

		-Il|--install-local)
			
			if [[ -z "$2" ]]; then
				fancy_message error "You failed to specify a package"
				exit 1
			fi
			
			while [[ -n "$2" ]]; do
				INPUT="$(basename "$2" ".pacscript")" # Removes the suffix
				export local="yes"
				
				# Enter directory if exists
				if [[ -d "$INPUT" ]]; then
					cd "$(basename "$INPUT")"
				fi
				# Check if the file exist
				if [[ ! -f "$2".pacscript ]]; then
					fancy_message error "$2 does not exist"
					shift
					continue
				fi
				shift
				
				export PACKAGE="$(basename "$INPUT")"
				source "$STGDIR/scripts/install-local.sh"
				if [[ $? -ne 0 ]]; then
					fancy_message error "Failed to install ${GREEN}${PACKAGE}${NC}"
					continue
				fi
				shift
			done
			if [[ -s "LOGFILE" ]]; then
				exit 1
			fi
			exit 0
		;;

		-S|--search)
			
			export SEARCH=$2
			if [[ -z "$SEARCH" ]]; then
				fancy_message error "You failed to specify a package"
				exit 1
			fi
			
			source "$STGDIR/scripts/search.sh"
			exit 0
		;;

		-R|--remove)
			
			if [[ -z "$2" ]]; then
				fancy_message error "You failed to specify a package"
				exit 1
			fi
			
			while [[ -n "$2" ]]; do
				PACKAGE=$2
				shift
				source "$STGDIR/scripts/remove.sh"
				if [[ $? -ne 0 ]]; then
					fancy_message error "Failed to remove ${GREEN}${PACKAGE}${NC}"
				fi
			done
			if [[ -s "LOGFILE" ]]; then
				exit 1
			fi
			exit 0
		;;

		-A|--add-repo)
			REPO="$2"

			if [ ! -f "$STGDIR/repo/pacstallrepo.txt" ]; then
				echo 'https://raw.githubusercontent.com/pacstall/pacstall-programs/master' > "$STGDIR/repo/pacstallrepo.txt"
				return 0
			fi

			if [ ! -z $REPO ]; then
				source "$STGDIR/scripts/add-repo.sh"
				exit 0
			else
				fancy_message error "You failed to specify a repo to add"
				return 1
			fi
		;;

		-V|--version)
			PACKAGE="$2"

			if [[ -z "$PACKAGE" ]]; then
				echo -e "1.5.1 ${BIPurple}Moonlight${NC}"
				exit 0
			else
				# If pacstall -V was called with an argument, it's a package, so get the package version (usful for scripting)
				if pacstall -Qi "$PACKAGE" | grep 'version' | cut -d ":" -f2 | sed 's/ //g'; then
					exit 0
				else
					fancy_message error "${GREEN}${PACKAGE}${NC} ins not installed"
					exit 1
				fi
			fi
		;;

		-U|--update)
			USERNAME="$2"
			BRANCH="$3"
			# This stuff gives the ability for persistent updates
			if [[ -z "$BRANCH" ]]; then
				if [[ -f "$STGDIR/repo/update" ]]; then
					BRANCH=$(sed 's/.*\ //' "$STGDIR/repo/update")
				else 
					BRANCH="master"
				fi
			fi
			if [[ -z "$USERNAME" ]]; then
				if [[ -f "$STGDIR/repo/update" ]]; then
					USERNAME=$(sed 's/\s.*$//' "$STGDIR/repo/update")
				else
					USERNAME="pacstall"
				fi
			fi

			sudo wget -q -N https://raw.githubusercontent.com/"$USERNAME"/pacstall/"$BRANCH"/misc/scripts/update.sh -P "$STGDIR/scripts" 2> /dev/null
			source "$STGDIR/scripts/update.sh"
			exit 0
		;;

		-L|--list)
			/bin/ls -1aA "$STOWDIR"
			exit 0
		;;

		-D|--download)
			
			if [[ -z "$2" ]]; then
				fancy_message error "You failed to specify a package"
				exit 1
			fi
			
			while [[ -n "$2" ]]; do
				PACKAGE=$2
				shift
				export type="download"
				source "$STGDIR/scripts/search.sh"
				
				if [[ $? -ne 0 ]]; then
					((i++))
					continue
				fi

				export URL="$REPO/packages/$PACKAGE/$PACKAGE.pacscript"
				source "$STGDIR/scripts/download.sh"
				
				if [[ $? -ne 0 ]]; then
					fancy_message error "Failed to download the ${GREEN}${PACKAGE}${NC} pacscript"
					continue
				fi
				
				fancy_message info "${GREEN}${PACKAGE}${NC}'s pacscript is downloaded in ${GREEN}$HOMEDIR/.cache/pacstall/$PACKAGE${NC}"
			done

			if [[ -s "LOGFILE" ]]; then
				exit 1
			fi
			exit 0
		;;

		-Up|--upgrade)
			source "$STGDIR/scripts/upgrade.sh"
			
			if [[ -s "LOGFILE" ]]; then
				exit 1
			fi
			exit 0
		;;

		-Qi|--query-info)
			PACKAGE=$2
			source "$STGDIR/scripts/query-info.sh"
			exit 0
		;;

		-T|--tree)
			PACKAGE="$2"

			if [[ ! -d "$STOWDIR/$PACKAGE" ]]; then
				fancy_message error "$PACKAGE does not exist"
				exit 1
			fi

			tree -C "$STOWDIR/$PACKAGE" | sed "s/\/usr\/src\/pacstall\/$PACKAGE/\//g"
			exit 0
		;;

		*)
			pacstall -h
			exit 3
		;;
	esac
	shift
done
if [[ "$1" == '--' ]]; then shift; fi

# vim:set ft=sh ts=4 sw=4 noet:
