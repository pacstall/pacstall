#!/bin/bash

#     ____                  __        ____
#    / __ \____ ___________/ /_____ _/ / /
#   / /_/ / __ `/ ___/ ___/ __/ __ `/ / /
#  / ____/ /_/ / /__(__  ) /_/ /_/ / / /
# /_/    \__,_/\___/____/\__/\__,_/_/_/
#
# Copyright (C) 2020-2021
#
# This file is part of Pacstall
#
# Pacstall is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# Pacstall is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pacstall. If not, see <https://www.gnu.org/licenses/>.

BOLD=$(tput bold)
NORMAL=$(tput sgr0)
NC='\033[0m'
# Curtesy of https://stackoverflow.com/a/28938235/13449010
# Regular Colors
BLACK='\033[0;30m'        # Black
RED='\033[0;31m'          # Red
GREEN='\033[0;32m'        # Green
YELLOW='\033[0;33m'       # Yellow
BLUE='\033[0;34m'         # Blue
PURPLE='\033[0;35m'       # Purple
CYAN='\033[0;36m'         # Cyan
WHITE='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

ask() {
    local prompt default reply

    if [[ ${2:-} = 'Y' ]]; then
        prompt="${BIGreen}Y${NC}/${RED}n${NC}"
        default='Y'
    elif [[ ${2:-} = 'N' ]]; then
        prompt="${GREEN}y${NC}/${BIRed}N${NC}"
        default='N'
    else
        prompt="${GREEN}y${NC}/${RED}n${NC}"
        default=''
    fi

    while true; do

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -ne "$1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        if [[ -z "$DISABLE_PROMPTS" ]]; then
                read -r reply </dev/tty
        else
                echo "$default"
                reply=$default
        fi

        # Default?
        if [[ -z $reply ]]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

function fancy_message() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
      return
    fi
    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local RESET="\e[0m"
    local MESSAGE_TYPE=""
    local MESSAGE=""
    MESSAGE_TYPE="${1}"
    MESSAGE="${2}"
    case ${MESSAGE_TYPE} in
      info) echo -e "[${BGreen}+${NC}] INFO: ${MESSAGE}";;
      warn) echo -e "[${BRed}*${NC}] WARNING: ${MESSAGE}";;
      error) echo -e "[${BRed}!${NC}] ERROR: ${MESSAGE}";;
      *) echo -e "[${BOLD}?${NORMAL}] UNKNOWN: ${MESSAGE}";;
    esac
}

# run sudo apt update if it's been more than a week
[ -z "$(find -H /var/lib/apt/lists -maxdepth 0 -mtime -7)" ] && sudo apt-get update -qq

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
  case "$1" in
    -P|--disable-prompts)
      fancy_message warn "Prompts are disabled"
      DISABLE_PROMPTS=yes
      ;;
    -h|--help)
      echo " 
      options:
      -I --install, Installs package
      -S --search, Search for package
      -R --remove, Removes package
      -D --download, Downloads script
      -C --change-repo, Chooses repo
      -U --update, Update script
      -V --version, Prints pacstall version
      -L --list, Lists installed packages
      -Up --upgrade, Upgrades packages
      -Qd --query-depends, Get dependencies of package
      -Qi --query-info, Get package info
       "
      exit 0
      ;;
    -I|--install)
      export LC_ALL=C
      function trap_ctrlc () {
	    fancy_message warn "the installation of $2 was interrupted, removing files"
	    rm -rf /tmp/pacstall/*
        exit 2
      }
      trap "trap_ctrlc" 2
      if [ "$EUID" -ne 0 ]; then 
        fancy_message error "Run as root"
        exit 1
      fi
      PACKAGE=$2
      if [[ -z "$PACKAGE" ]]; then
        fancy_message error "You failed to specify a package"
        exit 1
      fi
      # Make the directory if not exist
      if [[ ! -e /usr/share/pacstall/repo/ ]]; then
        mkdir -p /usr/share/pacstall/repo
        touch /usr/share/pacstall/repo/pacstallrepo.txt
	    sudo pacstall -C
      fi
      REPO=$(cat /usr/share/pacstall/repo/pacstallrepo.txt)
      export HOMEDIR=$HOME
      PACAKGE=$2
      INSTALLING=1
      export REPO=$(cat /usr/share/pacstall/repo/pacstallrepo.txt)
      export URL="$REPO/packages/$PACKAGE/$PACKAGE.pacscript"
      source /usr/share/pacstall/scripts/download.sh
      exit
      ;;
    -Il|--install-local)
      REPO=$(cat /usr/share/pacstall/repo/pacstallrepo.txt) 
      INPUT=$2
      # If string is absolute dir
      if [[ "$string" == */* ]] || [[ "$string" == *\\* ]] ; then
        cd $(pwd)
        parentdir="$(dirname "$INPUT")"
        eval dir="$parentdir"
        cd "$dir"
        PACKAGE=$(basename "$dir")
        PACKAGE="$(echo "$PACKAGE" | sed 's/\..*$//')"
      else
          # If it's in pwd
          PACKAGE=$(echo "$INPUT" | sed 's/:.*//')
      fi
      source /usr/share/pacstall/scripts/install-local.sh
      exit
      ;;
    -S|--search)
      source /usr/share/pacstall/scripts/search.sh
      ;;
    -R|--remove)
      PACKAGE=$2
      # Check if $2 is filled (not empty) because if not, stow will remove every package (from experience, oof)
      if [[ -z "$PACKAGE" ]]; then
        fancy_message error "You failed to specify a package"
        exit 1
      fi
      source /var/log/pacstall_installed/"$PACKAGE"
      if [ -d "/usr/src/pacstall/$PACKAGE" ]; then
        fancy_message info "Removing symlinks"
        cd /usr/src/pacstall
        sudo stow -D "$PACKAGE"
        fancy_message info "Removing package"
        source /var/log/pacstall_installed/"$PACKAGE"
        sudo rm -rf /usr/src/pacstall/"$PACKAGE"
        hash -r
	    if [[ $removescript == "yes" ]] ; then
	        fancy_message info "Running post removal script"
	        REPO=$(cat /usr/share/pacstall/repo/pacstallrepo.txt)
            # Sources the output of /var/cache/pacstall/pkg/version/pkg.pacscript so we don't have to download scripts from the repo
            source <(cat /var/cache/pacstall/"$PACKAGE"/$(pacstall -Qi "$PACKAGE" | sed 's/: /=/g' | sed -n -e 's/version=//p')/"$PACKAGE".pacscript)
	        removescript
        fi
        if [ -n "$dependencies" ]; then
            fancy_message info "You may want to remove ${BLUE}$dependencies${NC}"
        fi
        sudo rm -f /var/log/pacstall_installed/"$PACKAGE"
        exit
      else
        fancy_message error "$PACKAGE does not exist or not properly symlinked"
        exit 1
      fi
      ;;
    -C|--change-repo)
      if [[ -z "$2" ]]; then
      . /usr/share/pacstall/scripts/change-repo.sh
      else
        echo "$2" | sudo tee /usr/share/pacstall/repo/pacstallrepo.txt >/dev/null 2>&1
        exit
      fi
      ;;
    -V|--version)
      if [[ -z "$2" ]]; then
        echo -e "1.3 ${BIPurple}Amaranth${NC}"
        exit 0
      else
        if pacstall -Qi "$2" | grep 'version' | cut -d ":" -f2 | sed 's/ //g'; then
          exit
        else
          fancy_message error "$2 doesn't exist"
          exit 1
        fi
      fi
      ;;
    -U|--update)
      USERNAME="$2"
      BRANCH="$3"
      if [[ -z "$BRANCH" ]]; then
          BRANCH="master"
      fi
      if [[ -z "$USERNAME" ]]; then
          USERNAME="pacstall"
      fi
      if ask "Are you sure you want to update pacstall?" Y; then
        for i in {change-repo.sh,search.sh,download.sh,install-local.sh,upgrade.sh}; do
            sudo wget -q -N https://raw.githubusercontent.com/"$USERNAME"/pacstall/"$BRANCH"/misc/scripts/"$i" -P /usr/share/pacstall/scripts 2>/dev/null 
        done
        sudo wget -q -N https://raw.githubusercontent.com/"$USERNAME"/pacstall/"$BRANCH"/pacstall -P /bin 2>/dev/null
        sudo mkdir -p /usr/share/bash-completion/completions
        sudo wget -q -O /usr/share/bash-completion/completions/pacstall https://raw.githubusercontent.com/"$USERNAME"/pacstall/"$BRANCH"/misc/completion/bash 2>/dev/null
        if command -v fish &>/dev/null; then
            sudo wget -q -O /usr/share/fish/vendor_completions.d/pacstall.fish https://raw.githubusercontent.com/"$USERNAME"/pacstall/"$BRANCH"/misc/completion/fish 2>/dev/null
        fi
        echo '
    ____                  __        ____
   / __ \____ ___________/ /_____ _/ / /
  / /_/ / __ `/ ___/ ___/ __/ __ `/ / /
 / ____/ /_/ / /__(__  ) /_/ /_/ / / /
/_/    \__,_/\___/____/\__/\__,_/_/_/
'
        fancy_message info "You are at version $(pacstall -V)"
        fancy_message warn "Be sure to check our GitHub release page to make sure you have no incompatible code: https://github.com/$USERNAME/pacstall/tree/$BRANCH"
        exit 0
      else
        exit 1
      fi
      ;;
    -L|--list)
      export LC_ALL=C
      /bin/ls -1aA /usr/src/pacstall
      exit
      ;;
    -D|--download)
      export LC_ALL=C
      PACKAGE=$2
      if [[ -z "$PACKAGE" ]]; then
        fancy_message error "You failed to specify a package"
        exit 1
      fi
      INSTALLING=0
      REPO=$(cat /usr/share/pacstall/repo/pacstallrepo.txt)
      source /usr/share/pacstall/scripts/download.sh
      exit
      ;;
    -Qd|--query-depends)
      export LC_ALL=C
      PACKAGE=$2
      REPO=$(cat /usr/share/pacstall/repo/pacstallrepo.txt)
      URL="$REPO/packages/$PACKAGE/$PACKAGE.pacscript"
      if [[ -z "$PACKAGE" ]]; then
        fancy_message error "You failed to specify a package"
        exit 1
      fi
      if curl --output /dev/null --silent --head --fail "$URL"; then
        source <(curl -s "$URL") >/dev/null 2>&1
      else
        fancy_message error "$PACKAGE doesn't seem to exist"
        exit 1
      fi
      echo -e "${GREEN}${BOLD}build_depends${NORMAL}${NC}: \"$build_depends\""
      echo -e "${GREEN}${BOLD}depends${NORMAL}${NC}: \"$depends\""
      exit
      ;;
    -Up|--upgrade)
      export LC_ALL=C
      . /usr/share/pacstall/scripts/upgrade.sh
      exit
      ;;
    -Qi|--query-info)
      export LC_ALL=C
      PACKAGE=$2
      if [[ -z "$PACKAGE" ]]; then
          fancy_message error "You failed to specify a package"
          exit 1
      fi
      if [ ! -f /var/log/pacstall_installed/"$PACKAGE" ]; then
          fancy_message error "Package does not exist"
          exit 1
      fi
      source /var/log/pacstall_installed/"$PACKAGE"
      echo "name: $PACKAGE"
      echo "version: $version"
      echo "size: $(du -sh /usr/src/pacstall/"$PACKAGE" | awk '{print $1}')"
      echo "description: ""$description"""
      echo "date installed: ""$date"""
      if [[ -n $maintainer ]]; then
        echo "maintainer: ""$maintainer"""
      fi
      if [[ -n $pacdepslist ]]; then
          echo "pacstall dependencies: ""${pacdepslist[*]}"""
      fi
      if [[ -n $dependencies ]]; then
          echo "dependencies: ""$dependencies"""
      fi
      if [[ -n $build_dependencies ]]; then
          echo "build dependencies: ""$build_dependencies"""
      fi
      exit
      ;;
    -T|--tree)
      LC_ALL=C
      PACKAGE="$2"
      if [ -d "/usr/src/pacstall/$PACKAGE" ]; then
          tree -C /usr/src/pacstall/"$PACKAGE" | sed "s/\/usr\/src\/pacstall\/$PACKAGE/\//g"
      else
          fancy_message error "Package does not exist"
          exit 1
      fi
      ;;
     *)
      pacstall -h
      exit 3
      ;;
  esac; shift
done
if [[ "$1" == '--' ]]; then shift; fi
